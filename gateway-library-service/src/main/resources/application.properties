# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection
#DATABASE_URL= #moved to env var
spring.datasource.url=jdbc:postgresql://localhost:5432/libraries
spring.datasource.username=postgres
spring.datasource.password=postgres
#spring.datasource.url=jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}?sslmode=require&amp;sslfactory=org.postgresql.ssl.NonValidatingFactory
#spring.datasource.username=${DATABASE_USER}
#spring.datasource.password=${DATABASE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1
server.port=8080
services.library-url=http://library:8060/
services.reservation-url=http://reservation:8070/
services.rating-url=http://rating:8050/

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

spring.jpa.generate-ddl=true

spring.jpa.properties.hibernate.id.new_generator_mappings=false

#server.servlet.encoding.charset=UTF-8
#server.servlet.encoding.force-response=true